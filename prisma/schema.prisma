generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model instagramcomment {
  id                     String             @id
  commentId              String             @unique(map: "InstagramComment_commentId_key")
  postId                 String
  parentCommentId        String?
  userId                 String
  username               String?
  text                   String             @db.Text
  timestamp              DateTime
  isReplied              Boolean            @default(false)
  isHidden               Boolean            @default(false)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime
  instagramcomment       instagramcomment?  @relation("instagramcommentToinstagramcomment", fields: [parentCommentId], references: [commentId], map: "InstagramComment_parentCommentId_fkey")
  other_instagramcomment instagramcomment[] @relation("instagramcommentToinstagramcomment")
  instagrampost          instagrampost      @relation(fields: [postId], references: [postId], map: "InstagramComment_postId_fkey")

  @@index([parentCommentId], map: "InstagramComment_parentCommentId_fkey")
  @@index([postId], map: "InstagramComment_postId_fkey")
}

model instagrammessage {
  id                     String             @id
  messageId              String             @unique(map: "InstagramMessage_messageId_key")
  conversationId         String
  senderId               String
  recipientId            String
  text                   String             @db.Text
  timestamp              DateTime
  isRead                 Boolean            @default(false)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime
  replyToId              String?
  isFromBusiness         Boolean            @default(false)
  instagrammessage       instagrammessage?  @relation("instagrammessageToinstagrammessage", fields: [replyToId], references: [id], map: "InstagramMessage_replyToId_fkey")
  other_instagrammessage instagrammessage[] @relation("instagrammessageToinstagrammessage")

  @@index([replyToId], map: "InstagramMessage_replyToId_fkey")
}

model instagrampost {
  id               String             @id
  postId           String             @unique(map: "InstagramPost_postId_key")
  caption          String?            @db.Text
  mediaType        String?
  permalink        String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  instagramcomment instagramcomment[]
}

model instagramuser {
  id          String   @id
  username    String?
  name        String?
  lastFetched DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model systemuser {
  id        String    @id
  username  String    @unique(map: "SystemUser_username_key")
  password  String
  name      String
  email     String?
  role      String
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime
}

model whatsappcontact {
  id          String   @id
  name        String?
  profileName String?
  lastSeen    DateTime @default(now())
  isBlocked   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model whatsappmessage {
  id                    String            @id
  messageId             String            @unique(map: "WhatsAppMessage_messageId_key")
  conversationId        String
  senderId              String
  recipientId           String
  text                  String?           @db.Text
  messageType           String            @default("text")
  mediaUrl              String?
  timestamp             DateTime
  isRead                Boolean           @default(false)
  isFromBusiness        Boolean           @default(false)
  replyToId             String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime
  whatsappmessage       whatsappmessage?  @relation("whatsappmessageTowhatsappmessage", fields: [replyToId], references: [id], map: "WhatsAppMessage_replyToId_fkey")
  other_whatsappmessage whatsappmessage[] @relation("whatsappmessageTowhatsappmessage")

  @@index([replyToId], map: "WhatsAppMessage_replyToId_fkey")
}
